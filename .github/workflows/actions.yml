# Имя рабочего процесса, которое будет отображаться в GitHub Actions
name: CI Build and Test

# ДОБАВЛЕНО: Права доступа для записи в Pages
permissions:
  contents: write
  pages: write
  id-token: write

# ДОБАВЛЕНО: Concurrency для управления параллельными запусками
concurrency:
  group: "pages"
  cancel-in-progress: false

# Триггеры для запуска рабочего процесса
on:
  # Запуск при push в ветку main
  push:
    branches: [ "main" ]
  # Запуск при pull request в ветку main
  pull_request:
    branches: [ "main" ]
  # Позволяет запускать этот рабочий процесс вручную со страницы Actions
  workflow_dispatch:
    inputs:
      # Входные данные для ручного запуска: выбор тестового набора
      suite:
        description: 'Test suite to run'
        required: true
        default: 'smoke'
        type: choice
        options:
          - smoke
          - regression
          - allTests

jobs:
  # Job для сборки и тестирования
  build-and-test:
    # Имя задания, которое будет отображаться в GitHub
    name: Build and Test
    # Используем последнюю версию Ubuntu для выполнения задания
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v4

      # Шаг 2: Настройка JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          # Кэширование зависимостей Maven для ускорения сборок
          cache: maven

      # ДОБАВЛЕНО: Кэширование Maven зависимостей для ускорения сборки
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Шаг 3: Запуск тестов с использованием Maven
      # ИСПРАВЛЕНО: Секреты передаются напрямую, а не через env
      - name: Run tests
        run: mvn clean test -DsuiteName=${{ github.event.inputs.suite || 'smoke' }} -Duser=${{ secrets.SD_USER }} -Dpassword=${{ secrets.SD_PASSWORD }}

      # Шаг 4: Генерация отчета Allure
      # ИСПРАВЛЕНО: Всегда генерируем отчет, независимо от результата тестов
      - name: Generate Allure Report
        if: always()
        run: mvn allure:report

      # Шаг 5: Загрузка артефактов с результатами Allure
      - name: Upload Allure results artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: target/allure-results
          retention-days: 7

      # Шаг 6: Загрузка Allure отчета как артефакта для деплоя
      # ИСПРАВЛЕНО: Всегда загружаем артефакт для деплоя
      - name: Upload Allure report artifact
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          name: allure-report
          path: target/site/allure-maven-plugin

  # ДОБАВЛЕНО: Отдельный job для деплоя на GitHub Pages
  deploy:
    # ИСПРАВЛЕНО: Зависит от build-and-test, но запускается всегда
    needs: build-and-test
    # ИСПРАВЛЕНО: Всегда деплоим, независимо от результата тестов
    if: always()

    # Настройки окружения GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Download Allure report artifact
        # ИСПРАВЛЕНО: Всегда скачиваем артефакт
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: allure-report
          path: ./_site

      - name: Verify Allure report exists
        # ИСПРАВЛЕНО: Проверяем наличие отчета перед деплоем
        if: always()
        run: |
          if [ -d "./_site" ] && [ "$(ls -A ./_site)" ]; then
            echo "✅ Allure report found, proceeding with deployment"
          else
            echo "❌ Allure report not found or empty"
            exit 1
          fi

      - name: Deploy to GitHub Pages
        id: deployment
        # ИСПРАВЛЕНО: Всегда пытаемся деплоить
        if: always()
        uses: actions/deploy-pages@v4