# Имя рабочего процесса, которое будет отображаться в GitHub Actions
name: CI Build and Test

# ДОБАВЛЕНО: Права доступа для записи в Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Триггеры для запуска рабочего процесса
on:
  # Запуск при push в ветку main
  push:
    branches: [ "main" ]
  # Запуск при pull request в ветку main
  pull_request:
    branches: [ "main" ]
  # Позволяет запускать этот рабочий процесс вручную со страницы Actions
  workflow_dispatch:
    inputs:
      # Входные данные для ручного запуска: выбор тестового набора
      suite:
        description: 'Test suite to run'
        required: true
        default: 'smoke'
        type: choice
        options:
          - smoke
          - regression
          - allTests

jobs:
  # Единственное задание в этом рабочем процессе
  build-and-test:
    # Имя задания, которое будет отображаться в GitHub
    name: Build, Test and Publish Report
    # Используем последнюю версию Ubuntu для выполнения задания
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v4

      # Шаг 2: Настройка JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          # Кэширование зависимостей Maven для ускорения сборок
          cache: maven

      # ДОБАВЛЕНО: Кэширование Maven зависимостей для ускорения сборки
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Шаг 3: Запуск тестов с использованием Maven
      # ИСПРАВЛЕНО: Секреты передаются напрямую, а не через env
      - name: Run tests
        run: mvn clean test -DsuiteName=${{ github.event.inputs.suite || 'smoke' }} -Duser=${{ secrets.SD_USER }} -Dpassword=${{ secrets.SD_PASSWORD }}

      # Шаг 4: Генерация отчета Allure
      # 'if: always()' гарантирует, что этот шаг выполнится, даже если тесты упадут
      - name: Generate Allure Report
        if: always()
        run: mvn allure:report

      # Шаг 5: Загрузка артефактов с результатами Allure
      - name: Upload Allure results artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: target/allure-results
          retention-days: 7

      # Шаг 6: Развертывание отчета Allure на GitHub Pages для удобного просмотра
      # ИСПРАВЛЕНО: Добавлено условие для деплоя только из main ветки
      - name: Deploy Allure report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Директория для публикации
          publish_dir: target/site/allure-maven-plugin
          # Сохранять предыдущие отчеты
          keep_files: true

      # ДОБАВЛЕНО: Шаг 7 - Автоматический вывод ссылки на Allure отчет
      - name: Display Allure Report URL
        if: always()
        run: |
          echo "=========================================="
          echo "📊 ALLURE TEST REPORT"
          echo "=========================================="
          echo ""
          echo "🌐 Отчет доступен по ссылке:"
          echo "   https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          echo ""
          echo "📈 Детальная статистика тестов:"
          echo "   - Workflow: ${{ github.workflow }}"
          echo "   - Запуск: ${{ github.run_id }}"
          echo "   - Ветка: ${{ github.ref_name }}"
          echo "   - Коммит: ${{ github.sha }}"
          echo ""
          echo "🔧 Для просмотра отчета перейдите по ссылке выше."
          echo "=========================================="

      # ДОБАВЛЕНО: Шаг 8 - Создание summary с ссылкой на отчет
      - name: Create Summary with Report Link
        if: always()
        run: |
          REPORT_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          echo "# 📊 Allure Test Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Ссылки" >> $GITHUB_STEP_SUMMARY
          echo "- **🌐 Allure отчет:** [$REPORT_URL]($REPORT_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- **🔧 Workflow:** [$WORKFLOW_URL]($WORKFLOW_URL)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Информация о запуске" >> $GITHUB_STEP_SUMMARY
          echo "- **Репозиторий:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ветка:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Коммит:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Набор тестов:** ${{ github.event.inputs.suite || 'smoke' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Отчет сгенерирован автоматически*" >> $GITHUB_STEP_SUMMARY
